[
{
	"uri": "//localhost:1313/",
	"title": "Building a Serverless Text-to-Speech Application with Amazon Polly",
	"tags": [],
	"description": "",
	"content": "Work with Amazon System Manager - Session Manager Overall In this lab, you\u0026rsquo;ll learn the basics and practice of Amazon System Manager - Session Manager . Perform creating public and private instance connections.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Create DynamoDB Table",
	"tags": [],
	"description": "",
	"content": "Create DynamoDB Table Lab DynamoDB At the top of the AWS Management Console, in the search bar, search for and select DynamoDB.\nSelect create table.\nCreate a new DynamoDB table with:\nTable name: posts\nPartition key: (String)id\nTable settings: Default settings\nSelect : Create table There is no need to define the entire table structure now. After completing the application setup, the following information will be stored in the DynamoDB table:\nid: The ID of the post.\nstatus: UPDATED or PROCESSING, depending on whether the MP3 file has been generated.\ntext: The text of the post where the audio file is being generated.\nvoice: The Amazon Polly voice used to generate the audio file.\nurl: The link to the S3 bucket where the audio file is stored.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/",
	"title": "Prepare Resources",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a DynamoDB table, an Amazon S3 bucket, create an SNS topic. Then create Lambda functions for the event.\n"
},
{
	"uri": "//localhost:1313/0-tablecontent/",
	"title": "Table of Contents",
	"tags": [],
	"description": "",
	"content": "Objectives\nBy completing this workshop, you will be able to:\nCreate an Amazon DynamoDB table to store data\nCreate a RESTful API using Amazon API Gateway\nCreate AWS Lambda functions triggered by the API Gateway\nConnect AWS Lambda functions with Amazon Simple Notification Service (SNS)\nUse Amazon Polly to synthesize speech in multiple languages and voices\nDuration\nThis workshop takes approximately 90 minutes to complete.\nEnvironment and Direction\nYou will build a serverless application, meaning you do not need to work with servers — no provisioning, no patching, no scaling. AWS Cloud will handle this automatically, allowing you to focus on your application.\nThe application provides two methods – one to send information about new posts, which is then converted into an MP3 file, and one to retrieve information about posts (including links to the MP3 files stored in Amazon S3). When the application sends information about a new post:\n1.The information is received by a RESTful web service provided by Amazon API Gateway. This web service is called by a static web page hosted on Amazon Simple Storage Service (Amazon S3).\n2.Amazon API Gateway triggers an AWS Lambda function, New Post , which initiates the creation of the MP3 file.\n3.The Lambda function inserts the post information into an Amazon DynamoDB table, where information about all posts is stored.\n4.To run the entire process asynchronously, you use Amazon Simple Notification Service (Amazon SNS) to separate the process of receiving information about new posts and starting to convert them to audio.\n5.Another Lambda function, Convert to Audio , is subscribed to your SNS topic and is triggered whenever a new message arrives (meaning a new post will be converted to an audio file).\n6.The Convert to Audio Lambda function uses Amazon Polly to convert text into an audio file in the specified language (the same language as the text).\n7.The new MP3 file is stored in a dedicated S3 bucket.\n8.The post information is updated in a DynamoDB table. The URL to the audio file stored in the S3 bucket is saved along with the previously stored data.\nWhen the application retrieves post information:\n1.The RESTful web service is implemented using Amazon API Gateway. Amazon API Gateway provides methods for retrieving information about posts. These methods contain the post content and a link to the S3 repository where the MP3 file is stored. The web service is called by a static web page hosted on Amazon S3.\n2.Amazon API Gateway calls the Get Post Lambda function, which implements the logic for retrieving post data.\n3.The Get Post Lambda function will retrieve information about the post (including a reference to Amazon S3) from a DynamoDB table and return the information.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.2-createpublicsubnet/",
	"title": "Create an Amazon S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Create an Amazon S3 Bucket You need to create an Amazon S3 bucket to store all the audio files generated by your application. You create a bucket with a unique name, such as audioposts-123456789 . At the top of the AWS Management Console, in the search bar, search for and select S3.\nSelect Create Bucket and configure the following details:\nBucket name: audioposts-NUMBER\nReplace NUMBER with a random number\nCopy the bucket name into a text editor when you use the bucket name later.\nUnder Object Ownership, select ACLs enabled\nUnder Block all public access settings for this bucket, uncheck Block all public access, and then uncheck all other options.\nNote: All individual options remain unchecked. When you uncheck all public access, you must select the individual options that apply to your situation and security goals. In production, it is recommended to use the least permissive setting possible.\nA warning box appears that reads: Turning off Block all public access may make this bucket and its objects public. AWS recommends that you leave Block all public access enabled unless public access is required for specific and verified use cases, such as hosting a static website.\nSelect the checkbox next to I acknowledge that the current settings may make this bucket and its objects public.\nSelect Create Bucket.\nNote: Each Amazon S3 bucket must have a unique name.\nCaution: If you receive an error that says The requested bucket name is not available, select the Edit link at the top, change the bucket name, and try again until it works.\n"
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Building a Serverless Text-to-Speech App with Amazon Polly\nSpeech synthesis is not easy in general. You can\u0026rsquo;t assume that when an app reads each letter of a sentence, the output will make sense. Some common challenges for text-to-speech apps include:\nWords that are spelled the same but pronounced differently: I live in Las Vegas vs. This presentation is broadcast live from Las Vegas . Text normalization: Distinguish between abbreviations, acronyms, and units: St. , which can expand to Street or Saint . Text-to-phoneme conversion in languages with complex mappings, such as in English, tough , through , and though . In this example, similar parts of different words can be pronounced differently depending on the word and context. Foreign words ( déjà vu ), proper names ( François Hollande ), and slang ( ASAP , LOL ). Amazon Polly provides speech synthesis that overcomes these challenges, allowing you to focus on building text-to-speech applications instead of solving translation challenges.\nAmazon Polly turns text into realistic speech. It enables you to create apps that speak naturally, allowing you to build entirely new categories of voice-enabled products. Amazon Polly is an AI service from Amazon that uses advanced deep learning technology to synthesize voices that sound like human speech. It currently includes dozens of realistic voices in over 20 languages, so you can choose your ideal voice and build voice-enabled applications that work in many different countries.\nIn addition, Amazon Polly provides the fast, consistent response times needed to support real-time interactive conversations. You can cache and store Polly audio files for offline playback or redistribution. In other words, what you convert and store is yours. There are no additional text-to-speech conversion fees when using voice. Polly is also easy to use. Simply send the text you want to convert to speech to the Amazon Polly API. Amazon Polly instantly returns the audio stream to your application, which can be played live or stored in a standard audio file format such as MP3.\nIn this workshop, you will create a basic, serverless application that uses Amazon Polly to convert text to speech. The application has a simple user interface, accepts text in a variety of languages, and then converts it to an audio file that you can play from your web browser. This workshop uses blog posts, but you can use any type of text. For example, you could use the app to read recipes while you prepare a meal, or read the news or a book while you drive or bike.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.3-createprivatesubnet/",
	"title": "Create SNS Topic",
	"tags": [],
	"description": "",
	"content": "Create SNS Topic As you may have seen in the architecture diagram, the logic for converting a post (text) to an audio file is split into two AWS Lambda functions. This is done for a couple of reasons.\nFirst, it allows the application to use asynchronous calls so that when a user submits a new post to the application, it immediately receives the ID of the new DynamoDB item, so the application knows what to request next without having to wait for the conversion to complete. For small posts, the conversion to an audio file can take a few milliseconds, but for larger posts (100,000 words or more), the text conversion can take much longer. In other use cases, such as real-time streaming, size is not an issue because Amazon Polly starts streaming voice as soon as the first byte is available.\nSecond, the system uses a Lambda function to convert the posts.\nSince the process has been split into two processes, there needs to be a way to integrate them together. You use Amazon SNS to send notifications about new posts from the first function to the second function.\nAt the top of the AWS Management Console, in the search bar, search for and select .Simple Notification Service\nIn the left navigation pane, select Topics .\nNote: You may need to expand the navigation pane by selecting the menu icon. 1.Select Create Topic and configure the following details:\nType: Select Standard\nName: new_posts\nDisplay Name: New Posts\n1.At the bottom of the page, select Create Topic.\n2.Copy the Topic ARN and paste it into a text editor for later use.\nExpected Output: arn:aws:sns:us-west-2:123456789012:new_posts\nNote: You will configure your Lambda functions to use this Topic ARN later in the lab. "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation and implementation steps",
	"tags": [],
	"description": "",
	"content": "\rYou will need to prepare an AWS account with administrative rights that can access the AWS Management Console to start the project\nLaunch the CloudFormation Stack\nThe AWS CloudFormation template is used to set up lab resources in the AWS Region you choose. This step is required because the following instructions will rely on these resources. The CloudFormation template provides the following resources:\nIAM roles.\nAmazon DynamoDB tables.\nAWS Step Function State Machine.\n1.Download the CloudFormation template\n2.Store the YAML template file in a folder on your local machine.\nNavigate to CloudFormation in the AWS Management Console.\nOn the CloudFormation console, select Upload Template File.\nSelect the template you just downloaded, and then select Next.\nGive the stack a name, such as polly-serverless-stack\nFor the Stack Configuration option, leave the default value and select Next.\nUnder Capabilities and Transformations, acknowledge all.\nTo deploy the template, select Submit.\nOnce the template is deployed, to review the resources you created, navigate to CloudFormation Resources and then select the CloudFormation stack you created.\nCloud Formation deployment takes about 1–2 minutes to complete.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.4-createsecgroup/",
	"title": "Create a Lambda Function ",
	"tags": [],
	"description": "",
	"content": "Create a Lambda Function for New Posts The first Lambda function you create is the entry point for the application. It receives information about new posts that need to be converted to audio files.\n1.At the top of the AWS Management Console, in the search bar, search for and select Lambda.\n2.Select Create Function.\nSelect Author from scratch and use the following settings: Function name: PostReader_NewPost Runtime: Python 3.12 Extension Change default execution role Execution role: Select Use existing role Current role: Select Lab-Lambda-Role Select Create function. 2.Enter code: Delete the existing code and paste the following code:\nimport boto3\rimport os\rimport uuid\rdef lambda_handler(event, context):\rrecordId = str(uuid.uuid4())\rvoice = event[\u0026quot;voice\u0026quot;]\rtext = event[\u0026quot;text\u0026quot;]\rprint('Generating new DynamoDB record, with ID: ' + recordId)\rprint('Input Text: ' + text)\rprint('Selected voice: ' + voice)\r# Creating new record in DynamoDB table\rdynamodb = boto3.resource('dynamodb')\rtable = dynamodb.Table(os.environ['DB_TABLE_NAME'])\rtable.put_item(\rItem={\r'id' : recordId,\r'text' : text,\r'voice' : voice,\r'status' : 'PROCESSING'\r}\r)\r# Sending notification about new post to SNS\rclient = boto3.client('sns')\rclient.publish(\rTopicArn = os.environ['SNS_TOPIC'],\rMessage = recordId\r)\rreturn recordId\rCheck the code. The Lambda function performs the following functions:\nTakes two input parameters:\nVoice: One of dozens of voices supported by Amazon Polly.\nText: The text of the post that we want to convert to an audio file.\nCreates a new record in the DynamoDB table with information about the new post.\nPublishes information about the new post to SNS (the item ID/DynamoDB post ID is published there as a message).\nReturns the DynamoDB item ID to the user.\nSelect Deploy. Note: The Lambda function needs to know the DynamoDB table name and SNS topic. To provide these values, you use environment variables. This is a great way to pass information to a function without hard-coding the values into the function itself.\nSelect the Configuration tab to configure environment variables.\nIn the left navigation pane, select Environment Variables .\nIn the Environment Variables section, select Edit .\nSelect Add Environment Variable. .\nKey: Enter DB_TABLE_NAME . - Value: Enter posts .\nSelect save .\nIn the left navigation pane of the Configuration tab, select General Configuration .\nUpdate the timeout to 10 seconds . Select save . The New Post Lambda function is ready! Now you can test if the function works.\n1.Select the Test tab and configure the following details:\nEvent name: Joanna\nEnter code: Delete the existing code and paste the following code:\n{\r\u0026quot;voice\u0026quot;: \u0026quot;Joanna\u0026quot;,\r\u0026quot;text\u0026quot;: \u0026quot;This is working!\u0026quot;\r}\r1.Select Save.\n2.Select Test to run your test event.\nYou will see the message: Execution result: successful .\nYou can expand the Details section to see the execution log.\nThe New Post Lambda function returns an ID and you can see the input values in the Log output.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.5-createec2linux/",
	"title": "Create a Lambda Function to Convert to Audio",
	"tags": [],
	"description": "",
	"content": "Now you create a Lambda function to convert text stored in a DynamoDB table to an audio file.\nSelect Functions in the upper left navigation pane. Note: You may need to expand the navigation pane by selecting the menu icon.\n1.Select Create Function. 2.Select Author from scratch and use the following settings:\nFunction name: ConvertToAudio Runtime: Python 3.12 Expand Change default execution role Execution role: Select Use existing role Current role: Select Lab-Lambda-Role 1.Scroll down and select Create Function. 2.Enter code: Delete the existing code and paste the following code:\nimport boto3\rimport os\rfrom contextlib import closing\rfrom boto3.dynamodb.conditions import Key, Attr\rdef lambda_handler(event, context):\rpostId = event[\u0026quot;Records\u0026quot;][0][\u0026quot;Sns\u0026quot;][\u0026quot;Message\u0026quot;]\rprint (\u0026quot;Text to Speech function. Post ID in DynamoDB: \u0026quot; + postId)\r# Retrieving information about the post from DynamoDB table\rdynamodb = boto3.resource('dynamodb')\rtable = dynamodb.Table(os.environ['DB_TABLE_NAME'])\rpostItem = table.query(\rKeyConditionExpression=Key('id').eq(postId)\r)\rtext = postItem[\u0026quot;Items\u0026quot;][0][\u0026quot;text\u0026quot;]\rvoice = postItem[\u0026quot;Items\u0026quot;][0][\u0026quot;voice\u0026quot;]\rrest = text\r# Because single invocation of the polly synthesize_speech api can\r# transform text with about 3000 characters, we are dividing the\r# post into blocks of approximately 2500 characters.\rtextBlocks = []\rwhile (len(rest) \u0026gt; 2600):\rbegin = 0\rend = rest.find(\u0026quot;.\u0026quot;, 2500)\rif (end == -1):\rend = rest.find(\u0026quot; \u0026quot;, 2500)\rtextBlock = rest[begin:end]\rrest = rest[end:]\rtextBlocks.append(textBlock)\rtextBlocks.append(rest)\r# For each block, invoke Polly API, which transforms text into audio\rpolly = boto3.client('polly')\rfor textBlock in textBlocks:\rresponse = polly.synthesize_speech(\rOutputFormat='mp3',\rText = textBlock,\rVoiceId = voice\r)\r# Save the audio stream returned by Amazon Polly on Lambda's temp\r# directory. If there are multiple text blocks, the audio stream\r# is combined into a single file.\rif \u0026quot;AudioStream\u0026quot; in response:\rwith closing(response[\u0026quot;AudioStream\u0026quot;]) as stream:\routput = os.path.join(\u0026quot;/tmp/\u0026quot;, postId)\rif os.path.isfile(output):\rmode = \u0026quot;ab\u0026quot; # Append binary mode\relse:\rmode = \u0026quot;wb\u0026quot; # Write binary mode (create a new file)\rwith open(output, mode) as file:\rfile.write(stream.read())\rs3 = boto3.client('s3')\rs3.upload_file('/tmp/' + postId,\ros.environ['BUCKET_NAME'],\rpostId + \u0026quot;.mp3\u0026quot;)\rs3.put_object_acl(ACL='public-read',\rBucket=os.environ['BUCKET_NAME'],\rKey= postId + \u0026quot;.mp3\u0026quot;)\rlocation = s3.get_bucket_location(Bucket=os.environ['BUCKET_NAME'])\rregion = location['LocationConstraint']\rif region is None:\rurl_beginning = \u0026quot;https://s3.amazonaws.com/\u0026quot;\relse:\rurl_beginning = \u0026quot;https://s3-\u0026quot; + str(region) + \u0026quot;.amazonaws.com/\u0026quot;\rurl = url_beginning \\\r+ str(os.environ['BUCKET_NAME']) \\\r+ \u0026quot;/\u0026quot; \\\r+ str(postId) \\\r+ \u0026quot;.mp3\u0026quot;\r# Updating the item in DynamoDB\rresponse = table.update_item(\rKey={'id':postId},\rUpdateExpression=\r\u0026quot;SET #statusAtt = :statusValue, #urlAtt = :urlValue\u0026quot;,\rExpressionAttributeValues=\r{':statusValue': 'UPDATED', ':urlValue': url},\rExpressionAttributeNames=\r{'#statusAtt': 'status', '#urlAtt': 'url'},\r)\rreturn\rCheck the code. The Lambda function performs the following functions:\nRetrieve the ID of the DynamoDB item (post ID) that needs to be converted to an audio file from the input message (SNS event) Get the item from DynamoDB Convert the text to an audio stream Put the audio file (MP3) into an S3 bucket Update the DynamoDB table with a reference to the S3 bucket and the new state The synthesize_speech method takes the text to be converted and the voice used. In return, it provides the audio stream . The problem is that the input text is limited to 3000 characters. Since a post can be very long, the posts need to be split into blocks of about 2500 characters, depending on the ending position of the last word in the block. After converting the blocks to audio streams, they are concatenated together.\nSelect Deploy. Similar to the New Post function, you need to tell this Lambda function which services it can interact with via Environment variables.\n1.Select the Configuration tab to configure the environment variables.\n2.In the left navigation pane, select Environment Variables .\n3.In the Environment Variables section, select Edit.\nSelect Add Environment Variable\nKey: EnterDB_TABLE_NAME\nValue: Enter posts\nSelect Add Environment Variable\nKey: Enter BUCKET_NAME\nValue: Enter the name of the bucket you created earlier. The name will look similar to this: audioposts-123\n1.Select Save.\nThe posts to be converted can be quite large, so you need to extend the maximum execution time of a code to 5 minutes.\n1.In the General Configuration section, select Edit.\nUpdate the timeout to 5 minutes. 1.Select Save.\nNow you configure the function to automatically fire when a message is sent to the SNS topic you created earlier.\n1.In the Triggers section, select Add Trigger and then configure:\nSelect source: SNS SNS topic: Choose from the available topics .new_posts 1.Select Add.\nNow you are ready to test if the two Lambda functions communicate successfully over SNS and generate the Polly audio file. "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.6-createec2windows/",
	"title": "Testing the functions",
	"tags": [],
	"description": "",
	"content": "Now try the following workflow:\nManually trigger the New Post Lambda function It stores the data in DynamoDB and sends a message to the SNS topic SNS triggers the Convert to Audio function, using Polly to generate the audio file and store it in the S3 bucket 1.Select Functions in the upper left corner.\nNote: You may need to expand the navigation pane by selecting the menu icon.\n1.Select the PostReader_NewPost function.\n2.Select Test.\nYou should see the message: Execution result: success .\nThis indicates that the function has been executed. Now you confirm that the other steps have also completed successfully.\n1.At the top of the AWS Management Console, in the search bar, search for and select .DynamoDB\n2.In the left navigation pane, select Explore Items .\n3.Select Posts .\nYou will see two entries because you ran the test twice. The second execution will also trigger the Convert to Audio Lambda function, so there is also an entry for the url .\n1.At the top of the AWS Management Console, in the search bar, search for and select .Lambda\n2.Select the ConvertToAudio function.\n3.Select the Monitoring tab.\nThe monitoring graph should indicate that the function was called. 1.Select View logs CloudWatch\n2.Select the Log Stream displayed in the list\n3.Expand the log entries to explore the error message\nFor example, if you receive the error The specified bucket does not exist , you need to confirm that the bucket name you entered in the Environment Variable matches the S3 bucket name you created earlier in the lab. If the Convert to Audio function was successful, you should see an MP3 file in your S3 bucket.\n1.At the top of the AWS Management Console, in the search bar, search for and select .S3\n2.Select your audio post bucket .\nYou should see an MP3 file. Download and listen — you\u0026rsquo;ll hear Polly\u0026rsquo;s Joanna say \u0026ldquo;This works!\u0026rdquo; "
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.7-getpost/",
	"title": "Create a getpost Lambda Function",
	"tags": [],
	"description": "",
	"content": "Finally, the Get Post Lambda function provides a way to get information about posts from a database.\n1.At the top of the AWS Management Console, in the search bar, search for and select Lambda.\nChoose Create Function.\nChoose Author from scratch and use the following settings:\nFunction name: PostReader_GetPost Runtime: Python 3.12 Expand width Change default execution role Execution role: Select Use existing role Current role: Select Lab-Lambda-Role 1.Scroll down and select Create function.\n2.Import code: Delete existing code and encode the following:\nimport boto3\rimport operating system\rimport keyword boto3.dynamodb.conditions, Attr\rdef lambda_handler(event, context):\rpostId = event[\u0026quot;postId\u0026quot;]\rdynamodb = boto3.resource('dynamodb')\rtable = dynamodb.Table(os.environ['DB_TABLE_NAME'])\rif postId==\u0026quot;*\u0026quot;:\ritem = table.scan()\relse:\ritem = table.query(\rKeyConditionExpression=Key('id').eq(postId)\r)\rreturn item[\u0026quot;Item\u0026quot;]\rThis time, the code is very short. This function is expected to take the post ID (DynamoDB item ID) and based on this ID, it will retrieve all the information (including the S3 link to the audio file if available) and return it. To be more user friendly if the input parameter is an asterisk (*), the Lambda function will return all the items from the database. For databases with many items, avoid using this method as it can reduce performance and can take a long time.\nChoose Deploy. Again, you need to provide the table name DynamoDB as the environment variable for the function.\nChoose the Configuration tab to configure the environment variable. 2.In the left navigation pane, select Environment Variables .\n3.In the Field Variables section, select Edit.\nSelect Add Environment Variable\nKey: Import DB_TABLE_NAME\nValue: Import post\nSelect Save. Now you can test this function!\n1.In tab 88, create your test event with the following parameters:\nEvent name AllPosts\nEnter code: Replace the current code with the following:\n{\r\u0026quot;postId\u0026quot;: \u0026quot;*\u0026quot;\r}\rSelect Save.\nSelect Test to run the event test.\nYou will see the message: Execution result: success\nIf you expand the Details section, you will see a list of all records from the DynamoDB. table "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.8-restful/",
	"title": "Exposing Lambda Functions as RESTful Web Services",
	"tags": [],
	"description": "",
	"content": "The last thing you need to do is develop your logic application as a RESTful web service that can be easily called using the standard HTTP protocol. To do this, you use Amazon API Gateway.\n1.At the top of the AWS Management Console, in the search bar, search for and select .API Gateway\n2.In the Rest API console, select Build.\n3.In the Create REST API section, for API details, use the following parameters:\nSelect New API API Name: PostReaderAPI Description: API for PostReader Application Endpoint Type: Region Select Create API. After creating the API, you need to create two HTTP methods.\nYou start by configuring the POST method to call the Lambda function PostReader_NewPost . 1.In the Method section, select Create Method.\nFor the Method type, select POST .\nFor the Lambda Function, select the function that has PostReader_NewPost in its name.\nChoose Create Method.\nFor the GET method, the API will call the Lambda function PostReader_GetPost . In the Resource blank, select the / icon above POST .\nIn the method range, select Create Method.\nFor the Method type, select GET .\nFor the Lambda Function, select the function that has PostReader_GetPost in its name.\nChoose Create Method.\nThe last method to configure is CORS (Cross-origin resource sharing). This method allows calling the API from a website with a different nameserver. 1.In the Resources pane, select the / icon above GET .\n2.In the Resource section, select Enable CORS .\nFor Gateway response, select Default 4XX and Default 5XX .\nFor Access-Control-Allow-Methods , select GET and POST .\nSelect Save. Now you configure the GET method for the query postId parameter, which provides information about the id of the post to respond to. Choose the GET method. 2.In the Settings request method, select Edit .\n3.Expand the URL query string parameter extension.\nChoose Add Query String.\nFor Name , enter .postId\nSelect Save.\nThe Lambda PostReader_GetPost function is expected to receive input data in JSON format, so the API needs to be configured to map parameters to this format. To do this, you can add the mapping to the Integration Request configuration. Choose the Integration Request tab. 2.In the Integration Request settings, select Edit.\nFor Request Forwarding Content, select When no template is defined (can be exported). 4.Expand Map Templates.\nChoose Add Template Model.\nFor Remove Content, enter .application/json\nFor Body Template, enter:\n{\r\u0026quot;postId\u0026quot; : \u0026quot;$input.params('postId')\u0026quot;\r}\rSelect Save.\nThe API is now available for declarative development! ChooseDeploy API. Stage: Select New Stage\nName: Dev\nChooseDeploy\n1.Copy the Call URL value and save it to the editor for later use.\nNote: The URL is used later to interact with the application.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.9-serverlessuser/",
	"title": "Create a Serverless UI",
	"tags": [],
	"description": "",
	"content": "Although the application is fully functional, it is only exposed as a RESTful web service. You now deploy a small website to Amazon S3, a great option for hosting static websites. This website uses JavaScript to connect to the API and provide text-to-speech functionality within the website.\n1.Download these files to your computer, right-click and select \u0026ldquo;Save link as\u0026hellip;\u0026rdquo;.\nindex.html scripts.js styles.css Note: Make sure each file retains its original file name, including the extension.\nEdit your scripts.js file using a Text Editor, replacing YOUR_API_GATEWAY_ENDPOINT (on the first line) with the Invoke URL you copied earlier. Expected output:\nvar API_ENDPOINT = \u0026quot;https://xxxxx.execute-api.us-west-2.amazonaws.com/Dev\u0026quot;\rNow upload these files to your Amazon S3 bucket. 1.At the top of the AWS Management Console, in the search bar, search for and select S3.\n2.Select Create Bucket and configure the following details:\nBucket name: www-BUCKET Replace BUCKET with the name of your audio post bucket Copy the bucket name into a text editor. You will use the bucket name later. Change the permissions of the bucket so that everyone can access the site. Under Object Ownership, select ACL enabled Under Settings to block public access for this bucket, uncheck the Block all public access option, then uncheck all other options. Note: Note that all individual options remain unchecked. When you uncheck all public access, you must select the individual options that apply to your situation and security goals. In production, it is recommended to use the least permission setting possible.\nA warning box appears that reads: Disabling the option to block all public access may make this bucket and its objects public. AWS recommends that you leave the option to block all public access enabled unless public access is required for specific and verified use cases, such as hosting a static website.\nSelect the checkbox next to I acknowledge that the current settings may make this bucket and its objects public.\nSelect Create Bucket\n1.After you have created the bucket, select it from the bucket list and upload three files to your new www bucket.\nNote: The files must be named: index.html , scripts.js , and styles.css\n1.On the bucket page, select the Permissions tab at the top.\n2.Scroll down to the Group Policy section and select Edit.\n3.Paste this policy into the editor:\n{\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Sid\u0026quot;: \u0026quot;PublicReadGetObject\u0026quot;,\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Principal\u0026quot;: \u0026quot;*\u0026quot;,\r\u0026quot;Action\u0026quot;: [\r\u0026quot;s3:GetObject\u0026quot;\r],\r\u0026quot;Resource\u0026quot;: [\r\u0026quot;arn:aws:s3:::www-BUCKET/*\u0026quot;\r]\r}\r]\r}\r1.Replace www-BUCKET with your www-audioposts group name.\n2.Select Save Changes.\nWARNING: If you receive an error The policy has an invalid resource, confirm that you have edited the Resource line to match your group name.\nNote: You can ignore the This bucket has public access warning. This is intentional.\nFinally, you enable static website hosting, which makes the bucket act like a static website.\n1.Select the Properties tab.\n2.Ignore the AWS CloudTrail Permissions error.\n3.Scroll down to the Static Website Hosting section and select Edit.\n4.Select Enable for the static website hosting service.\nIndex document: index.html Error document: index.html Note: We are currently using the index.html file as the error document.\nSelect: Save Changes. 1.Copy the endpoint URL to your clipboard.\nThat\u0026rsquo;s it! You can now test if the website is live.\n1.Open a new web browser tab and paste the Endpoint URL you just copied.\nYou should see a page that looks like this:\nIf you write something in the text area and select Speak, an event will be sent to your app. The app will convert the text into an audio file asynchronously. Depending on the size of the text you provide, the conversion may take a few seconds or a few minutes.\nTo view posts and their audio files, enter the post ID or * in the Search box: 1.Press the Play button to hear the audio.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]